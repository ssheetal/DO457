

Welcome to DO457 Red Hat Ansible for Network Automation

Ansible 2.5
Little Ansible Tower


  Navdeep
  Nav
  
  Reading UK
  
  
  
  Name
  Company If possible
  Experience 	Network Administration IOS Juniper, Redhat Linux ( ssh vim cp mv rm mkdir find )
  Expectation
  Hobbies
  City Timezone	
  






						user/password
CS01			IOS			admin/student
Rest4			Vyos			vyos/vyos
spine01-02,leaf01-02
Server01-03		Redhat Linux		Prod Application deployed




Chapter 1:
 
Refer Diagram

		Community  				Enterprise
		ansible.org				redhat.com
		Free					Paid
		Dev/Test				Production
		Lot of time/No Money			Lot of Money/No Time
		AWX(Free)				Ansible Tower

Installation and subscription:




subscription-manager repos --enable=rhel-7-server-ansible-2-rpms
yum install ansible


Documentation:

## To see all Modules

	ansible-doc -l   

## Folder for python Modules

ls -l /usr/lib/python2.7/site-packages/ansible/modules/

Module is a python script(Module) which will do activity(Changes) on Managed Hosts



Plugins: Mostly Support Services

Anything NOT available as module, is available as Plugin
ansible-doc -t SOMETHING_STUPID -l //to see all plugins
ansible-doc -t connection -l

ansible-doc -t connection network_cli

ansible-doc -t inventory -l


Ansible File and Data Formats
It helps to be familiar with the file and data formats used by Ansible. Here is a list of formats,
broken down with sublists describing where each format is used:
• INI format
– The Ansible configuration file, ansible.cfg
– Inventory files (inventory files may also use YAML format)
• YAML
– Playbook files
– Inventory files, optionally
– Other included files, such as role files
• JSON
– The ansible-playbook program returns variable data in JSON form


Inventory:

	Default File:	/etc/ansible/hosts
	Custom File:	YOUR_CUSTOM_PATH

INI or YAML format:


	INI Format:
vim inventory

[spines]
spine01
spine02

[leafs]
leaf[01:08]

[ip_range]
192.168.1.[1:20]

ansible-inventory shows you how finl variable and system at the of execution of playbook:

ansible-inventory --list	//JSON format
ansible-inventory --graph
ansible-inventory --graph group
ansible-inventory --host host
ansible-inventory --list --yaml -i INI_inventory_file

ansible -i inventory --list-hosts spine*
https://stackoverflow.com/questions/33363023/is-there-any-option-to-list-groups-in-ansible#:~:text=If%20you%20just%20want%20a,the%20names%20of%20the%20groups.






Ansible configuration File:

ansible --version

Default File:		/etc/ansible/ansible.cfg			Level 1
User file(Home Dir):	~/.ansible.cfg					Level 2
Project specific:	./ansible.cfg					Level 3
Define Env Variable:	ANSIBLE_CONFIG      #=/tmp/ansible.config	Level 4


ANSIBLE_STDOUT_CALLBACK=yaml ansible-playbook abc.yaml

FLOW:
ansible comannd -> ansible.cfg -> parameters of ansible.cfg file (e.q. inventory) ->Move on with values


ansible.cfg is read first

## To see all variables and section refer 
vim /etc/ansible/ansible.cfg

## Sample ansible config file ## commonly used parameters

cat $CURRENT_PATH/ansible.cfg
inventory = PATH of inventory file/folder
remote_user= USER_NAME of ssh connection
log_path= CUSTOM_LOG_FILE_PATH
forks=
library=
ask_pass= True
gathering=implicit/explicit  //for fact gathering

[privilege_escalation]
#become=True
#become_method=sudo/su/enable/runas
#become_user=root
#become_ask_pass=False

# custom timeout values to accommodate slow 1000V VM
command_timeout = 180
connect_timeout = 100
connect_retry_timeout = 100


Forks vs Serial




	forks						serial
1.	ansible.cfg(default 5)				playbook
	ansible-plabyook a.yml --forks=4
2.	Manage number of threads/load			control no of systems updating at same time
	 on control node (save Control Node)
3.	task by task					host by host/play by play


The serial keyword can also be specified as a percentage, which will be applied to the total number of hosts in a play, in order to determine the number of hosts per pass:

Strategy:
https://docs.ansible.com/ansible/latest/user_guide/playbooks_strategies.html



Forks: inventory 10
Playbook: 4 tasks
Forks=4		Horizontal Direction

	S1	S2	S3	S4		S5	S6	S7	S8		S9 	S10
	T1	T1	T1	T1		T1	T1	T1	T1		T1	T1
	T2	T2	T2	T2		T2	T2	T2	T2		T2	T2
	T3	T3	T3	T3		T3	T3	T3	T3		T3	T3
	T4	T4	T4	T4		T4	T4	T4	T4		T4	T4
	T5	T5	T5	T5		T5	T5	T5	T5		T5	T5
	
	
	
	
	
	
	
Serial: 3 Vertical Direction
	S1	S2	S3			S4	S5	S6		S7	S8	S9	 	S10
	T1	T1	T1			T1	T1	T1
	T2	T2	T2			T2	T2	T2
	T3	T3	T3			T3	T3	T3
	T4	T4	T4			T4	T4	T4
	T5	T5	T5			T5	T5	T5
	
	
				
	
	
	
	forks overrise serial  or serial overrides forks  NONE
	
	forks= how many task i can run at one time			10
	serial: how many nodes you want to upgrade in parallel		25  
	T1	10,10,5
	T2	10,10,5	
	T3	10,10,5
	T4	10,10,5
	

Actual RAM requirements vary based on how many hosts Tower will manage simultaneously (which is controlled by the forks parameter in the job template or the system ansible.cfg file). To avoid possible resource conflicts, Ansible recommends 4 GB of memory per 100 forks. For example, if forks is set to 100, 4 GB of memory is recommended; if forks is set to 400, 16 GB of memory is recommended.

https://docs.ansible.com/ansible-tower/latest/html/installandreference/requirements_refguide.html	
	

		CHAPTER 2:
Ad-Hoc Commands:


ansible host-pattern -m module [-a 'module arguments'] [-i inventory]

ansible spine*-m vyos_ping  -a "dest=ip-address"


## Setup Ansible indentation format in vim

	vim ~/.vimrc
	autocmd FileType yaml setlocal ai ts=2 sw=2 et
	set cuc

Playbook: ## For more variables Refer cheat-sheet.yml

- name: Name/Purpose of Playbook
  hosts:
  - host1
  - host2
  connection: network_cli
  gather_facts: no
  tasks:
  - name: gather ios_facts
    ios_config:
      backup: yes
    register: version


				###############  Instructions to Run Playbook ###############


###############  Step 1:  Check Syntax of Playbook ###############

ansible-playbook install_httpd.yml --syntax-check


###############  Step 2:  Run Playbook in Simulation Mode (DRY RUN Or Prediction) ###############
###############  Step 2:  This Step only check in playbook if tasks will make any changes in managed hosts or not if run in real mode ###############

ansible-playbook install_httpd.yml --check

				#### OR ####

ansible-playbook install_httpd.yml -C


###############  Step 3:  Run Playbook in Real Mode ###############

ansible-playbook install_httpd.yml 


Other Usefull ansible-playbook commands:

ansible-playbook abc.yml --list-hosts

ansible-playbook abc.yml --list-tasks
ansible-playbook abc.yml --list-tags

Detailed Output: Verbosity

## Output Only
ansible-playbook install_httpd.yml -v

## Input and Output Only
ansible-playbook install_httpd.yml -vv

## More info Showing backgroung ansible working
ansible-playbook install_httpd.yml -vvv

## Detailed SSH Connection Information
ansible-playbook install_httpd.yml -vvvv

## Step by Step execution of playbook for better understanding
ansible-playbook install_httpd.yml -vvv  --step

## Start from specfic Task in playbook 
ansible-playbook install_httpd.yml --start-at-task="TASK_NAME"

## Limit on hosts to run playbook  from command line
ansible-playbook install_httpd.yml --limit=host_name
ansible-playbook install_httpd.yml -l host_name


REGISTERED VARIABLES:
register: variable
store output of current task whch can be used as conditional output for future task


## Multiple Play in one playbook


- name: First VYOS Playbook
  hosts: vyos
  connection: network_cli
  gather_facts: no
  tasks:
  - name: gather vyos_facts
    vyos_config:
      backup: yes
    register: version
    
- name: Second IOS Playbook
  hosts: ios
  connection: network_cli
  gather_facts: no
  tasks:
  - name: gather ios_facts
    ios_config:
      backup: yes
    register: version



	Chapter 3:

		Scope of Variables:
1 <  2  < 3
Role Scope:

1.	Host Scope		// Inventory File , group_vars, host_vars

	A.	Group_inventory: 		inventory File_ group variable		use = symbol (if using ini format inventory)
											[groupname:vars]
											var1="somevalue"
		
	B. 	Group_group_vars_folder: 	inventory_folder/group_vars/{{groupname}}(.yml) 		use :symbol
	C.	Group_group_vars_folder: 	group_vars/{{groupname}}(.yml)		use : symbol
			
	D.	host inventory variable		use = symbol
	E.					inventory_folder/host_vars/{{servername}}.yml		use : symbol
	F.					host_vars/{{servername}}.yml		use : symbol


2. 	Play Scope (Playbook)
	A.	vars:
	B. 	Vars_Prompt:	// prompt user to enter value //Interactive // Good for Dev
		
	C.	vars_files:
		- file_path
		
	D:	Task Scope:
		vars:
		  variable_name: "Value"  ## For that Specific Task
	E. 	Set Fact
			set_fact:
			  var1: "Some value you want to override"	
3.	Global Scope (Command Line Values)
	A.	ansible-playbook abc.yml -e 'var_name=some_value var2=someValue2 var3=someValue3' 

//Share Inventory Variables

Dev 		Test		QA		Prod
group_vars/
host_vars/

//No Share/Not Same Values
vars_files:

DICT Reverse Traverse by Defulat //Question


Roles:

Reusability for a purpose

Playbook: 30 tasks,variables: values,Inventory Hosts,

Var: values	// sensitive data
hosts: 		// exposing inventory
30 tasks	// 10 tasks

	Roles:
reusability
roles based on purpose: httpd php VYOS_NETWORK juniper_user  ios_user mysql  postgresql

Dev

4 VYOS_SETUP
15 OracleDatabase
10 Netwotk_security
11 Application Deployment

web_server
network-security
Find_all_devices -> Prerequisites -> Networking -> Web server -> Security -> Inform_Stake_Holders

Test


Prod


Web server
FTP MYSQL ios domain IP system configuration  Update OS


mysql_setup,web_server,ip_juniper,VLAN_cisco

	3 type of roles:
1. Private/Custom/Oraganization Roles		Local system/within Org
2. Public Roles					ansible-galaxy
3. Subscribed Roles				RedHat




1. Pre  Tasks			pre_tasks/
2. Pre  Handlers		pre_tasks/notified_handlers
3. Dependency Role Tasks (interface) vyos_user_role/tasks/main.yml
4. Main Role Tasks (banner) vyos_interface_role/tasks/main.yml
5. extra tasks in playbook	use_roles.yml tasks section> tasks
6. Dependency Role Handlers	vyos_user_role/handlers/main.yml
7. Main Role Handlers		vyos_interface_role/handlers/main.yml
8. extra handlers involved by tasks in playbook use_roles.yml handlers section  
9. Post  Tasks				post_tasks/		
10. Post  Handlers			post_tasks/notified -> handlers






Import (import_tasks, import_role)
static inclusion of tasks(you know tasks in advance)
ansible-playbook abc.yml --syntax-check    ## also check syntax of imported Task file
4  task in external file ## Condition checked on all task one by one although condition is false
--start-at-task can be used to start execution of playbook at certain point
Might take more time
for Development Environment

include (include_tasks, include_role)
Dynamic inclusion of tasks(you DO NOT know tasks in advance)
ansible-playbook abc.yml --syntax-check    ## DOES NOT check syntax of included Task file
4  task in external file ## Condition checked only once, if false file tasks are not included in execution of playbook
--start-at-task does n't work as task names are NOT known in advance
Time efficient
for Production Environment

import_playbook: playbook can only be imported NOT included


ansible.cfg
roles_path=/path_of_roles_folder:/second_folder:/third_folder





	Chapter 4:
	
	
	140 Ansible Tower Tomorrow
	
Ansible Vault:
		Create/Encrypt File:

ansible-vault create secret.yml							//new File Interactive
ansible-vault create secret.yml	--vault-password-file=somepass.txt		//new File // Non Interactive
ansible-vault encrypt secret.yml						//Existing File Prompt File already Exist
ansible-vault encrypt secret.yml --vault-password-file=somepass.txt		//Existing File from some file Non Interactive
ansible-vault view secret.yml							//see File ## vim will not work
ansible-vault decrypt secret.yml --output=without_secret.yml			//decrypt File
ansible-vault edit secret.yml							//change contents File
ansible-vault rekey secret.yml 		set cuc					//change current password to new one
ansible-vault rekey secret.yml 	--vault-password-file=pass1.txt --new-vault-password-file=pass2.txt //Non-Interactive
ansible-vault encrypt_string vyos						//Encrypt password



		Run a Encrypted File:
		
ansible-playbook secret.yml --ask-vault-pass				//single password on all files //Interactive
ansible-playbook secret.yml --vault-password-file=pass1.txt		//single password on all files //Non-Interactive

	//Multiple password on one file
	
ansible-playbook secret.yml --vault-id 1@prompt --vault-id 2@prompt --vault-id 3@prompt --vault-id 4@prompt
ansible-playbook secret.yml --vault-id 1@prompt --vault-id 2@prompt --vault-id 3@pass1.txt --vault-id 4@pass2.txt

Dynamic Inventory:

Scripts are written in Python normally. bash 
https://github.com/ansible/ansible/tree/stable-2.9/contrib/inventory


ansible-inventory
ansible-inventory is NOT for converting ini to yaml, purpose is: how the final inventory look like with all its variable value
Before running playbook, ansible-inventory  runs, create Final inventory and feeds it to playbook to run on it.

ansible or ansible-playbook requires inventory. Lot of variables/Lots os scripts

Final Runtime Env/hosts presented, if you want to see ansible-inventory to see final host with variables

Dynamic Inventory:

Active Directory, Cobbler, Redhat Satellite, VMWare, VirtualBox, Openstack, Openshift

Executable Script with [chmod +x script] (Mostly Python, but can be in different Language as well)



Joe and Dennis Owner

Japsper Network Admin

Company Startup: Router in Cloud with VM

Expansion Phase: 
Corporate Phase
Branch Opened


ansible-doc ios_facts
	    junos-Facos
		arista_facts
	
		vros

Community		Enterprise
awx			Ansible Tower
Free			Paid Support






Run a Job:		
1. Organization 
2. Inventory and Group/Host Variables
3. Playbook Folder(Manual Copy/Git SCM) on Tower	:	Copy Playbooks from workstation to Tower Machine
4. Change permission to awx:awx /var/lib/awx/projects/your_folder
5. Project maps to your_playbook_folder (Project <-> one_folder) One to one Mapping
6. Credentials Ansible Config
7. Job Template (Run a playbook using inventory,credentials and some other settings)
8. RBAC User  



Ansible
1. Nginx 		GUI
2. RabbitMQ		Messaging
3. Database		postgres
4. supervisorctl

Forks Serial Tags --limit 










	ping
ios_ping vyos_ping

	ios_interface		//Physical State enable /disable  
	ios_l3_interface	//change IP Address
	


	ios_command
	vyof_command		//excute command like command module
Will find find source code




- name: backup the device configuration
ios_config:
backup: yes
- name: look at device health indicators
ios_command:
commands:
# this provides hostname and uptime
- sh ver | include uptime
- sh ip domain
- sh clock
- sh ip name-server
- sh proc mem | include Total
register: results
- name: show results
debug:
msg: "{{ item }}"
loop: "{{ results.stdout_lines }}"


- name: "set domain name to {{ domain_name }}"
ios_config:
lines:
- "ip domain-name {{ domain_name }}"

Strategy
debug strategy should only be used at development stage
forks=4
linear			free

Linear:
tasks:
- name: Test reachability to 172.25.250.8
ios_ping:
dest: 172.25.250.8

- name: label outside interface
ios_interface:task files
name: GigabitEthernet2
description: outside

- name: backup config
vyos_config:
backup: yes
- name: look at system elements
vyos_command:
commands:
- sh host name
- sh system uptime
- sh host domain
- sh host date
- sh host os
register: results
- name: show results
debug:
var: results.stdout



Tags
System provided tags: all,always,never,untagged
rest are user named tags

Strategy
debug strategy should only be used at development stage
forks=4
linear			free

Linear:
t1	t1	t1	t1
free
t1	t1	t1	t1
t2	t2	t2
t3	t3	t3





Block/Rollback Demo

try catch finally

block rescue always
rescue: if there is an error on block task, it will come to rescue



Handlers: 


Special/Magic Variables:

https://docs.ansible.com/ansible/latest/reference_appendices/special_variables.html









