

Welcome to DO457 Red Hat Ansible for Network Automation (EX457)

Ansible 2.5

Little Ansible Tower

Audio/Video/Screen Share



		RH294			Ansible with Linux
		DO417			Ansible with Windows Servers
		DO457			Ansible with Network Devices  CURRENT COURSE

Name:
Org: If possible
Experience:
	• Experience with network administration, including a solid understanding of TCP/IP,routers, and managed switches. Students should be familiar with managing network devices from the command line, preferably with one or more of Cisco IOS, IOS XR, or NX-OS; Juniper JUNOS; Arista EOS; or VyOS.
	• The students will work with text files and run commands in a Red Hat Enterprise Linux environment. A working knowledge of Linux, including how to edit text files and run commands from the shell, and how to use SSH to log in to remote systems. Knowledge equivalent to "Red Hat System Administration I" (RH124) or better is recommended.
		vim(Text Editor) cp mkdir mv rm ssh
	• Prior Ansible knowledge is not required.
	
Expectation:
City/Timezone: 
Hobbies:

MST 1
PST 2

RH124

Programming Knowledge NO
Identation nano(space) vim




							user/password

tower		Ansible Tower student/student   root/redhat student is sudo user
Utility		Local Github Server

CS01					IOS				admin/student
spine01-02,leaf01-02			Vyos				vyos/vyos

Server01-03		Redhat Linux		Prod Application deployed

Workstation		RHEL			student/student   root/redhat student is sudo user

Chapter 1:
 
Refer Diagram

		Community  				Enterprise
		ansible.org					redhat.com
		Free						Paid
		Dev/Test/Learning			Production
		Lot of time/No Money		Lot of Money/No Time
		AWX(Free)					Ansible Tower(Paid)

Installation and subscription:




subscription-manager repos --enable=rhel-7-server-ansible-2-rpms
yum install ansible


Documentation:

## To see all Modules

	ansible-doc -l   

## Folder for python Modules

ls -l /usr/lib/python2.7/site-packages/ansible/modules/

Module is a python script(Module) which will do activity(Changes) on Managed Hosts

Ansible Modules get copied from Control Node to Managed Hosts
Ansible Plugins doesn't get copied, this is for support services 

Plugins: Mostly Support Services

Anything NOT available as module, is available as Plugin. Plugin provides Support Infrastructure
ansible-doc -t SOMETHING_STUPID -l //to see all plugins
ansible-doc -t connection -l

ansible-doc -t connection network_cli

ansible-doc -t inventory -l


Ansible File and Data Formats
It helps to be familiar with the file and data formats used by Ansible. Here is a list of formats,
broken down with sublists describing where each format is used:
• INI format
– The Ansible configuration file, ansible.cfg
– Inventory files (inventory files may also use YAML format)
• YAML
– Playbook files
– Inventory files, optionally
– Other included files, such as role files
• JSON
– The ansible-playbook program returns variable data in JSON form


Inventory:

	Default File:	/etc/ansible/hosts
	Custom File:	YOUR_CUSTOM_PATH

Inventory groups:
all, ungrouped as system/ansible defined default groups
Rest are CUSTOM NAMED groups

INI or YAML format:


	INI Format:
vim inventory

[spines]
spine01
spine02

[leafs]
leaf[01:08]

[ip_range]
192.168.1.[1:20]

ansible-inventory shows you how finl variable and system at the of execution of playbook:

ansible-inventory --list	//JSON format
ansible-inventory --graph
ansible-inventory --graph group
ansible-inventory --host host
ansible-inventory --list --yaml -i INI_inventory_file

ansible -i inventory --list-hosts spine*

ansible 192.168.[/2-3].[/4-8] --list-hosts -i invenotry_file_path

https://stackoverflow.com/questions/33363023/is-there-any-option-to-list-groups-in-ansible#:~:text=If%20you%20just%20want%20a,the%20names%20of%20the%20groups.






Ansible configuration File:

ansible --version

Default File:		/etc/ansible/ansible.cfg			Level 1
User file(Home Dir):	~/.ansible.cfg					Level 2		// Hidden File
Project specific:	./ansible.cfg					Level 3		// Current Folder
Define Env Variable:	ANSIBLE_CONFIG =/tmp/ansible.config		Level 4


ANSIBLE_STDOUT_CALLBACK=yaml ansible-playbook abc.yaml

FLOW:
Ad-hoc command/playbook -> ansible.cfg -> parameters of ansible.cfg file (e.q. inventory, privilege escalation,vault password file, connection settings ) -> ansible-inventory ->Move on with values


ansible.cfg is read first

## To see all variables and section refer 
vim /etc/ansible/ansible.cfg

## Sample ansible config file ## commonly used parameters

cat $CURRENT_PATH/ansible.cfg
inventory = PATH of inventory file/folder
remote_user= USER_NAME of ssh connection
log_path= CUSTOM_LOG_FILE_PATH
forks=
library=
ask_pass= True
gathering=implicit/explicit  //for fact gathering

[privilege_escalation]
#become=True
#become_method=sudo/su/enable/runas
#become_user=root
#become_ask_pass=False

# custom timeout values to accommodate slow 1000V VM
command_timeout = 180
connect_timeout = 100
connect_retry_timeout = 100

ansible-doc -t connection network_cli
ini               ansible.cfg
vars	   variable file
env             .bashrc   .bash_profile terminal based ENV variable


Copy/paste Parameters:

ansible.cfg          <-  /etc/ansible/ansible.cfg		//ask_pass
AD-Hoc command       <-  ansible --help				// --ask-pass



Forks vs Serial:
(CI/CD Implementation)


	forks										serial
1.	ansible.cfg(default 5)								playbook
	ansible-plabyook a.yml --forks=4
2.	Manage number of threads/load							control no of systems updating at same time
	 on control node (save Control Node)
3.	task by task									host by host/play by play


The serial keyword can also be specified as a percentage, which will be applied to the total number of hosts in a play, in order to determine the number of hosts per pass:

Strategy:
https://docs.ansible.com/ansible/latest/user_guide/playbooks_strategies.html



Forks: 

inventory 10
Playbook: 4 tasks
## Default forks=5
Forks=4		Horizontal Direction

	S1	S2	S3	S4		S5	S6	S7	S8		S9 	S10
	T1	T1	T1	T1		T1	T1	T1	T1		T1	T1
	T2	T2	T2	T2		T2	T2	T2	T2		T2	T2
	T3	T3	T3	T3		T3	T3	T3	T3		T3	T3
	T4	T4	T4	T4		T4	T4	T4	T4		T4	T4
	
	
	
	
Serial: 3 
Vertical Direction
	S1	S2	S3			S4	S5	S6		S7	S8	S9	 	S10
wmc-Bwmc65-V65.0.0-a20b019-31552 z70
Blue Jeans Network, Inc. © 2023
￼
REPORT AN ISSUE

	
	T1	T1	T1			T1	T1	T1		T1	T1	T1		T1
	T2	T2	T2			T2	T2	T2		T2	T2	T2		T2
	T3	T3	T3			T3	T3	T3		T3	T3	T3		T3
	T4	T4	T4			T4	T4	T4		T4	T4	T4		T4
	
	
	

	
	Forks  >  Serial			4 > 3		No Problem
	forks  < serial			3< 7		(Convert serial number into batches  3 +3 +1)
	
	forks overrise serial  or serial overrides forks  NONE
	
	forks= how many task i can run at one time			10
	serial: how many nodes you want to upgrade in parallel		25  
	T1	10,10,5
	T2	10,10,5	
	T3	10,10,5
	T4	10,10,5
	

Actual RAM requirements vary based on how many hosts Tower will manage simultaneously (which is controlled by the forks parameter in the job template or the system ansible.cfg file). To avoid possible resource conflicts, Ansible recommends 4 GB of memory per 100 forks. For example, if forks is set to 100, 4 GB of memory is recommended; if forks is set to 400, 16 GB of memory is recommended.
1 GB of memory per 10 forks OR 100MB per fork

https://docs.ansible.com/ansible-tower/latest/html/installandreference/requirements_refguide.html	
	

		CHAPTER 2:
Ad-Hoc Commands:


ansible host-pattern -m module [-a 'module arguments'] [-i inventory]

ansible spine*-m vyos_ping  -a "dest=ip-address"


## Setup Ansible indentation format in vim

	vim ~/.vimrc
	autocmd FileType yaml setlocal ai ts=2 sw=2 et cuc
	
ai : autoindent - copy the previous line's indentation
ts=2 : tabstop - set the number of spaces that the Tab key uses, when pressed
sw=2 : shiftwidth - number of spaces to use with autoindent
et : expandtab - use the space character as whitespace instead of Tab
cuc : cursorcolumn - highlight the column the cursor is on

Playbook: ## For more variables Refer cheat-sheet.yml

- name: Name/Purpose of Playbook
  hosts:
  - host1
  - host2
  connection: network_cli
  gather_facts: no
  tasks:
  - name: gather ios_facts
    ios_config:
      backup: yes
    register: version


				###############  Instructions to Run Playbook ###############


###############  Step 1:  Check Syntax of Playbook ###############

ansible-playbook install_httpd.yml --syntax-check


###############  Step 2:  Run Playbook in Simulation Mode (DRY RUN Or Prediction or Matrix Oracle) ###############
###############  Step 2:  This Step only check in playbook if tasks will make any changes in managed hosts or not if run in real mode ###############

ansible-playbook install_httpd.yml --check

				#### OR ####

ansible-playbook install_httpd.yml -C


###############  Step 3:  Run Playbook in Real Mode ###############

ansible-playbook install_httpd.yml 
ANSIBLE_STDOUT_CALLBACK=yaml ansible-playbook abc.yaml



Ranges:

Ad-Hoc
ansible 192.168.2.[/1-5] --list-hosts

Playbook

hosts: 192.168.2.[/1-5]

Other Usefull ansible-playbook commands:

ansible-playbook abc.yml --list-hosts

ansible-playbook abc.yml --list-tasks
ansible-playbook abc.yml --list-tags

Detailed Output: Verbosity

## Output Only
ansible-playbook install_httpd.yml -v

## Input and Output Only
ansible-playbook install_httpd.yml -vv

## More info Showing backgroung ansible working
ansible-playbook install_httpd.yml -vvv

## Detailed SSH Connection Information
ansible-playbook install_httpd.yml -vvvv

## Step by Step execution of playbook for better understanding
ansible-playbook install_httpd.yml -vvv  --step

## Start from specfic Task in playbook 
ansible-playbook install_httpd.yml --start-at-task="TASK_NAME"

## Limit on hosts to run playbook  from command line
ansible-playbook install_httpd.yml --limit=host_name
ansible-playbook install_httpd.yml -l host_name


REGISTERED VARIABLES:
register: variable
store output of current task whch can be used as conditional output for future task


## Multiple Play in one playbook


- name: First VYOS Playbook
  hosts: vyos
  connection: network_cli
  gather_facts: no
  tasks:
  - name: gather vyos_facts
    vyos_config:
      backup: yes
    register: version
    
- name: Second IOS Playbook
  hosts: ios
  connection: network_cli
  gather_facts: no
  tasks:
  - name: gather ios_facts
    ios_config:
      backup: yes
    register: version



	Chapter 3:
Ansible Config Scope: in ansible.cfg/command line inbuild ansible paramters

	## 	Variable Scope:		##
	
Role Scope:	In roles structure (defaults/main.yml and vars/main.yml)
Host Scope:	Inventory where hosts are defined
Play Scope:	In Playbook
Global Scope:	Command Line  OR RUN Time

		Scope of Variables:
Host Scope <  Play Scope  < Global Scope


1.	Host Scope		// Inventory File , group_vars, host_vars

	A.	Group_inventory: 		inventory File_ group variable		use = symbol (if using ini format inventory)
											[groupname:vars]
											var1="somevalue"
		
	B.	Group_group_vars_folder: 	group_vars/{{groupname}}(.yml)		use : symbol
			
	C.	host inventory variable		use = symbol
	D.	host_vars folder		host_vars/{{servername}}.yml		use : symbol


2. 	Play Scope (Playbook)
	A.	vars:
	B. 	Vars_Prompt:	// prompt user to enter value //Interactive // Good for Development Env
		
	C.	vars_files:
		- file_path
		
	D:	Task Scope:
		vars:
		  variable_name: "Value"  ## For that Specific Task
	E. 	Set Fact
			set_fact:
			  var1: "Some value you want to override"	
3.	Global Scope (Command Line Values)
	A.	ansible-playbook abc.yml -e 'var_name=some_value var2=someValue2 var3=someValue3' 

//Share Inventory Variables

Dev 		Test		QA		Prod
group_vars/
host_vars/

//No Share/Not Same Values
vars_files:

DICT Reverse Traverse by Defulat //Question


Facts:
System value is known as FACT
setup.py is default module for gathering facts
setup module is used for Linux (little bit for windows)
vyos_facts
ios_facts

setup module is default to collect facts works for Linux, somewhat for windows NOT for Network/others

IP Filters:
https://docs.ansible.com/ansible/latest/user_guide/playbooks_filters_ipaddr.html#playbooks-filters-ipaddr
https://docs.ansible.com/ansible/latest/collections/ansible/utils/docsite/filters_ipaddr.html

Roles:

Reusability for a purpose

Playbook: 30 tasks,variables: values,Inventory Hosts,

Var: values	// sensitive data
hosts: 		// exposing inventory
30 tasks	// 10 tasks

	Roles:
reusability
roles based on purpose: httpd php VYOS_NETWORK juniper_user  ios_user mysql  postgresql

web_server
network-security
Find_all_devices -> Prerequisites -> Networking -> Web server -> Security -> Inform_Stake_Holders

Roles:

defaults: 	define variables in main.yml
vars:		define variables in main.yml but highter priority than defaults
tasks:		TASK file, write tasks in main.yml 
handlers:	define handlers in main.yml which will be invoked by tasks in main.yml
meta:		Define Dependency roles
templates:	only template files .j2




	3 type of roles:
1. Private/Custom/Oraganization Roles		Local system/within Org
2. Public Roles					ansible-galaxy
3. Subscribed Roles				RedHat




1. Pre  Tasks							pre_tasks/tasks
2. Pre  Handlers						pre_tasks/notified_handlers
3. Dependency Role Tasks (interface) 				vyos_user_role/tasks/main.yml
4. Main Role Tasks (banner) 					vyos_interface_role/tasks/main.yml
5. extra tasks in playbook					use_roles.yml tasks section -> tasks
6. Dependency Role Handlers					vyos_user_role/handlers/main.yml
7. Main Role Handlers						vyos_interface_role/handlers/main.yml
8. extra handlers involved by tasks in playbook 		use_roles.yml handlers section  
9. Post  Tasks							post_tasks/		
10. Post  Handlers						post_tasks/notified -> handlers






Import (import_tasks, import_role)
static inclusion of tasks(you know tasks in advance)
ansible-playbook abc.yml --syntax-check    ## also check syntax of imported Task file
4  task in external file ## Condition checked on all task one by one although condition is false
--start-at-task can be used to start execution of playbook at certain point
Might take more time
for Development Environment
Can not loop for importing files

include (include_tasks, include_role)
Dynamic inclusion of tasks(you DO NOT know tasks in advance)
ansible-playbook abc.yml --syntax-check    ## DOES NOT check syntax of included Task file
4  task in external file ## Condition checked only once, if false file tasks are not included in execution of playbook
--start-at-task doesn't work as task names are NOT known in advance
Time efficient
for Production Environment



role defaults (defined in role/defaults/main.yml) 1


Can loop for importing files

import_playbook: playbook can only be imported NOT included


ansible.cfg
roles_path=/path_of_roles_folder:/second_folder:/third_folder





	Chapter 4:
	
	
	
Ansible Vault:
		Create/Encrypt File:

ansible-vault create secret.yml												//new File Interactive
ansible-vault create secret.yml	--vault-password-file=somepass.txt							//new File // Non Interactive
ansible-vault encrypt secret.yml											//Existing File Prompt File already Exist
ansible-vault encrypt secret.yml --vault-password-file=somepass.txt							//Existing File from some file Non Interactive
ansible-vault view secret.yml												//see File ## vim will not work
ansible-vault view secret.yml 	--vault-password-file=somepass.txt							//see File ## NON Interactive
ansible-vault decrypt secret.yml --output=without_secret.yml								//decrypt File
ansible-vault edit secret.yml												//change contents File
ansible-vault edit secret.yml 	--vault-password-file=somepass.txt							//change contents File // Non Interactive
ansible-vault rekey secret.yml 												//change current password to new one
ansible-vault rekey secret.yml 	--vault-password-file=pass1.txt --new-vault-password-file=pass2.txt 			//Non-Interactive
ansible-vault encrypt_string vyos											//Encrypt password

		Run a Encrypted File:
		
ansible-playbook secret.yml --ask-vault-pass				//single password on all files //Interactive
ansible-playbook secret.yml --vault-password-file=pass1.txt		//single password on all files //Non-Interactive

## Put password in ansible.cfg

[defaults]
vault_password_file=/secure_dir/pass1.txt


ansible-playbook secret.yml

	//Multiple password for playbook run with different dependent files 
	
ansible-playbook secret.yml --vault-id 1@prompt --vault-id 2@prompt --vault-id 3@prompt --vault-id 4@prompt
ansible-playbook secret.yml --vault-id 1@prompt --vault-id 2@prompt --vault-id 3@pass1.txt --vault-id 4@pass2.txt



ansible.cfg -> ansible-inventory -> convert inventory into format that playbook understand -> then playbook/Ad-Hoc runs


ansible-inventory is NOT for converting ini to yaml, purpose is: how the final inventory look like with all its final variable values Before running playbook, ansible-inventory  runs, create Final inventory and feeds it to playbook/Ad-Hoc to run on it.

ansible or ansible-playbook requires inventory. Lot of variables/Lots os scripts

Final Runtime Env/hosts presented, if you want to see ansible-inventory to see final host with variables

Dynamic Inventory:

Active Directory, Cobbler, Redhat Satellite, VMWare, VirtualBox, Openstack, Openshift
Scripts are written in Python normally but another language like  bash is also OK 


https://github.com/ansible/ansible/tree/stable-2.9/contrib/inventory

Executable Script with [chmod +x script] (Mostly Python, but can be in diffude or import task files.erent Language as well)



Joe and Dennis Owner

Japsper Network Admin

Company Startup: Router in Cloud with VM

Expansion Phase: 
Corporate Phase
Branch Opened


ansible-doc ios_facts
	    junos-Facos
		arista_facts
	
		vros

Community		Enterprise
awx			Ansible Tower
Free			Paid Support




Ansible Tower is paid (AWX free community) is only for executing playbook not write a playbook 

Run a Job:		
1. Organization 
2. Inventory and Group/Host Variables
	A. Whole Inventory
	B. For a specific Group
	C. For a specific Host
3. Playbook Folder(Manual Copy/Git SCM) on Tower	:	Copy Playbooks from workstation to Tower Machine
4. Change permission to awx:awx /var/lib/awx/projects/your_folder for Manual Copy (Git will have right perm automatically)
5. Project maps to your_playbook_folder (Project <-> one_folder) One to one Mapping
6. Credentials 
7. Job Template (Run a playbook using inventory,credentials and some other settings)
8. RBAC User (Role Based Access Control) 

Vars_Prompt is NOT compatible with tower, so SURVEY needs to be used

Ansible
1. Nginx 		GUIude or import task files.
2. RabbitMQ		Messaging
3. Database		postgres
4. supervisorctl

Forks Serial Tags --limit 



	ping
ios_ping vyos_ping

	ios_interface		//Physical State enable /disable  
	ios_l3_interface	//change IP Address
	


	ios_command
	vyof_command		//excute command like command module
Will find find source code




- name: backup the device configuration
ios_config:
backup: yes
- name: look at device health indicators
ios_command:
commands:
# this provides hostname and uptime
- sh ver | include uptime
- sh ip domain
- sh clock
- sh ip name-server
- sh proc mem | include Total
register: results
- name: show results
debug:
msg: "{{ item }}"
loop: "{{ results.stdout_lines }}"


- name: "set domain name to {{ domain_name }}"
ios_config:
lines:
- "ip domain-name {{ domain_name }}"

Strategy
debug strategy should only be used at development stage
forks=4
linear			free

Linear:
tasks:
- name: Test reachability to 172.25.250.8
ios_ping:
dest: 172.25.250.8

- name: label outside interface
ios_interface:task files
name: GigabitEthernet2
description: outside

- name: backup config
vyos_config:
backup: yes
- name: look at system elements
vyos_command:
commands:
- sh host name
- sh system uptime
- sh host domain
- sh host date
- sh host os
register: results
- name: show results
debug:
var: results.stdout


			###### Extra Topics for Production  ########
Tags:
	ansible provided tags: 		all(default tag),always,never,untagged
	Rest are User Named tags: 	dev, prod,test,qa,windows,rhel,centos





Strategy:
debug strategy should only be used at development stage

Collections:
 ansible-galaxy collection install cisco.ios -p ./collections/
 
 
 - name: Replace device configuration
    cisco.ios.ios_l2_interfaces:
      config:
        - name: GigabitEthernet0/2
          trunk:
          - allowed_vlans: 20-25,40
            native_vlan: 20
            pruning_vlans: 10
            encapsulation: isl
      state: replaced


forks=4
linear			free

Linear:
t1	t1	t1	t1


free
S1	S2	S3	S4 - name: Replace device configuration
    cisco.ios.ios_l2_interfaces:
      config:
        - name: GigabitEthernet0/2
          trunk:
          - allowed_vlans: 20-25,40
            native_vlan: 20
            pruning_vlans: 10
            encapsulation: isl
      state: replaced


t1	t1	t1	t1
t2	t2	t2
t3	t3	t3





Block/Rollback Demo:
Ansible doesn't have default rollback mechanism. (Desired Configuration)
This can be used for rollback and get the device back to original (Good last know configurations)

block 
	Actual Task
rescue
	Rollback the tasks in tasks section # if there is an error on block task, it will come to rescue
always
	Tasks which always needs to execute
	
try/catch/finally


Handlers: 
	Dependency tasks

Special/Magic Variables:

https://docs.ansible.com/ansible/latest/reference_appendices/special_variables.html





Chapter 5:
GE 194 199 205 208 212 220 223 227 232 236 240 245 252
LAB 254

Chapter 6:

GE 263 267 270 276 283 288 292 300 308 
LAB 311

Chapter 7:

LAB 318 324  329  336 342 350



Notes:
[[os]]_config - set a value in "configuration mode"
[[os]]_commands - show a value in exec mode - by def no stdout
[[os]]_system - set a system value
https://serverfault.com/questions/1042998/using-if-else-statement-inside-shell-module-in-ansible-playbook
